{
	"info": {
		"_postman_id": "1a6ea535-a2e7-41f3-936c-eb17b197cc71",
		"name": "TODO SpringBoot Copy 2",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31497526"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"user1\",\r\n    \"name\":\"erick\",\r\n    \"email\":\"user1@gmail.com\",\r\n    \"password\":\"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - token\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"// Guarda el token en una variable de entorno",
									"let response = pm.response.json();",
									"pm.environment.set(\"authToken\", response.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user3@gmail.com\",\n    \"password\":\"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Crear Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
									"const data = pm.response.json();",
									"pm.environment.set(\"projectId\", data.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Proyecto Test\",\n    \"description\": \"DescripciÃ³n de prueba\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Project por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Tiene el id correcto\", function () {",
									"  pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"projectId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Projects del usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Es un array\", function () {",
									"  pm.expect(Array.isArray(pm.response.json())).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Nombre actualizado\", function () {",
									"  pm.expect(pm.response.json().name).to.eql(\"Proyecto Actualizado\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Proyecto Actualizado\",\n    \"description\": \"DescripciÃ³n actualizada\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 204\", function () { pm.response.to.have.status(204); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TodoLists",
			"item": [
				{
					"name": "Crear TodoList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
									"const data = pm.response.json();",
									"pm.environment.set(\"todoListId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mi TodoList\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener TodoLists del Proyecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Es un array\", function () {",
									"  pm.expect(Array.isArray(pm.response.json())).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener TodoList por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Tiene el id correcto\", function () {",
									"  pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"todoListId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar TodoList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Nombre actualizado\", function () {",
									"  pm.expect(pm.response.json().name).to.eql(\"TodoList Actualizada\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TodoList Actualizada\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar TodoList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 204\", function () { pm.response.to.have.status(204); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Crear Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
									"const data = pm.response.json();",
									"pm.environment.set(\"taskId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tarea de prueba\",\n    \"description\": \"DescripciÃ³n de la tarea\",\n    \"dueDate\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Tasks de TodoList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Es un array\", function () {",
									"  pm.expect(Array.isArray(pm.response.json())).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Task por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Tiene el id correcto\", function () {",
									"  pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"taskId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"TÃ­tulo actualizado\", function () {",
									"  pm.expect(pm.response.json().title).to.eql(\"Tarea actualizada\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tarea actualizada\",\n    \"description\": \"DescripciÃ³n actualizada\",\n    \"dueDate\": \"2025-01-01\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Task Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"completed\", function () {",
									"  pm.expect(pm.response.json().completed).to.eql(\"true\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"completed\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks/{{taskId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks",
								"{{taskId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 204\", function () { pm.response.to.have.status(204); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/todolists/{{todoListId}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"todolists",
								"{{todoListId}}",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verifica si ya hay un token",
					"if (!pm.environment.get(\"authToken\")) {",
					"    console.log(\"No authToken. Procediendo a registrar e iniciar sesiÃ³n...\");",
					"",
					"    // Define usuario de prueba",
					"    const user = {",
					"        email: \"testuser_\" + Date.now() + \"@example.com\",",
					"        password: \"password123\",",
					"        name: \"testuser_\" + Date.now(),",
					"        username: \"testusername_\" + Date.now(),",
					"    };",
					"",
					"    // Registrar usuario",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"baseUrl\") + \"/users/register\",",
					"        method: \"POST\",",
					"        header: {",
					"            \"Content-Type\": \"application/json\"",
					"        },",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify(user)",
					"        }",
					"    }, function (err, res) {",
					"        if (err || res.code !== 200) {",
					"            console.error(\"Error registrando usuario:\", err || res.status);",
					"            return;",
					"        }",
					"",
					"        // Iniciar sesiÃ³n",
					"        pm.sendRequest({",
					"            url: pm.environment.get(\"baseUrl\") + \"/auth/login\",",
					"            method: \"POST\",",
					"            header: {",
					"                \"Content-Type\": \"application/json\"",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify(user)",
					"            }",
					"        }, function (err2, res2) {",
					"            if (err2 || res2.code !== 200) {",
					"                console.error(\"Error iniciando sesiÃ³n:\", err2 || res2.status);",
					"                return;",
					"            }",
					"",
					"            const json = res2.json();",
					"            const token = json.token;",
					"",
					"            if (token) {",
					"                pm.environment.set(\"authToken\", token);",
					"                console.log(\"Token guardado en variable de entorno:\", token);",
					"            } else {",
					"                console.error(\"No se encontrÃ³ token en la respuesta.\");",
					"            }",
					"        });",
					"    });",
					"} else {",
					"    console.log(\"Token ya presente:\", pm.environment.get(\"authToken\"));",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}